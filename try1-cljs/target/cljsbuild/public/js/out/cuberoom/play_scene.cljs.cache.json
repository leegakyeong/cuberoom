["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cuberoom.play-scene","~:imports",null,"~:requires",["^ ","~$db","~$cuberoom.db","^:","^:","~$cuberoom.js","^;"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$js-console","^;"],"~:defs",["^ ","~$add-object-key",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/mnt/second/juhyung/code/projects/cuberoom/src/cljs/cuberoom/play_scene.cljs","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",21,"~:arglists",["~#list",["~$quote",["^I",[["~$key"]]]]]],"^5","~$cuberoom.play-scene/add-object-key","^C","/mnt/second/juhyung/code/projects/cuberoom/src/cljs/cuberoom/play_scene.cljs","^G",21,"~:method-params",["^I",[["^K"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^E",1,"~:variadic?",false,"^D",5,"~:ret-tag",["^4",[null,"~$any"]],"^F",5,"~:max-fixed-arity",1,"~:fn-var",true,"^H",["^I",["^J",["^I",[["^K"]]]]]],"~$register",["^ ","^A",null,"^B",["^ ","^C","/mnt/second/juhyung/code/projects/cuberoom/src/cljs/cuberoom/play_scene.cljs","^D",11,"^E",7,"^F",11,"^G",15,"^H",["^I",["^J",["^I",[["~$value"]]]]],"~:doc","Register objects for this scene.\n\n  The value must contains these keys: :type, :x, :y, :image, :name.\n\n  :type can has :image and :sprite. :image is a static image. :sprite\n  is an image that can be animated.\n\n  :x is the x position of the object in the scene.\n  Left is 0.\n\n  :y is the y poisition of the object in the scene.\n  Up is 0.\n\n  :image is the key of the image that is registered in the resource.\n\n  :name is the key of this object in the DB and the phaser.\n\n  Example)\n  ```\n  (play-scene/register\n    {:type :image\n     :name ::object\n     :x 400\n     :y 300\n     :image ::image\n    }\n  ```\n  "],"^5","~$cuberoom.play-scene/register","^C","/mnt/second/juhyung/code/projects/cuberoom/src/cljs/cuberoom/play_scene.cljs","^G",15,"^M",["^I",[["^V"]]],"^N",null,"^O",["^I",[null,null]],"^E",1,"^P",false,"^D",11,"^Q",["^4",[null,"^R"]],"^F",11,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["^V"]]]]],"^W","Register objects for this scene.\n\n  The value must contains these keys: :type, :x, :y, :image, :name.\n\n  :type can has :image and :sprite. :image is a static image. :sprite\n  is an image that can be animated.\n\n  :x is the x position of the object in the scene.\n  Left is 0.\n\n  :y is the y poisition of the object in the scene.\n  Up is 0.\n\n  :image is the key of the image that is registered in the resource.\n\n  :name is the key of this object in the DB and the phaser.\n\n  Example)\n  ```\n  (play-scene/register\n    {:type :image\n     :name ::object\n     :x 400\n     :y 300\n     :image ::image\n    }\n  ```\n  "],"~$create-all-objects",["^ ","^A",null,"^B",["^ ","^C","/mnt/second/juhyung/code/projects/cuberoom/src/cljs/cuberoom/play_scene.cljs","^D",45,"^E",7,"^F",45,"^G",25,"^H",["^I",["^J",["^I",[[]]]]]],"^5","~$cuberoom.play-scene/create-all-objects","^C","/mnt/second/juhyung/code/projects/cuberoom/src/cljs/cuberoom/play_scene.cljs","^G",25,"^M",["^I",[[]]],"^N",null,"^O",["^I",[null,null]],"^E",1,"^P",false,"^D",45,"^Q","~$cljs.core/LazySeq","^F",45,"^S",0,"^T",true,"^H",["^I",["^J",["^I",[[]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:y","~:cuberoom.play-scene/keys","^5","~:object-type","~:type","~:create-object","~:image","~:x"]],"~:order",["^14","^5","^16","^18","^15","~:x","~:y","^17"]],"^W",null]