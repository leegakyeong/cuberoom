["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cuberoom.util.timing","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$make-once-per-sec",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/mnt/second/juhyung/code/projects/cuberoom/src/cljs/cuberoom/util/timing.cljs","~:line",3,"~:column",7,"~:end-line",3,"~:end-column",24,"~:arglists",["~#list",["~$quote",["^E",[[]]]]],"~:doc","This function returns a function that reduce the calls.\n  ```\n  (let [f (make-once-per-sec)]\n    (loop\n      (f println \"hi\")\n      (delay 1s)))\n  ```\n  The example above will print \"hi\" once per sec.\n  "],"^5","~$cuberoom.util.timing/make-once-per-sec","^?","src/cljs/cuberoom/util/timing.cljs","^C",24,"~:method-params",["^E",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"~:variadic?",false,"^@",3,"~:ret-tag","~$function","^B",3,"~:max-fixed-arity",0,"~:fn-var",true,"^D",["^E",["^F",["^E",[[]]]]],"^G","This function returns a function that reduce the calls.\n  ```\n  (let [f (make-once-per-sec)]\n    (loop\n      (f println \"hi\")\n      (delay 1s)))\n  ```\n  The example above will print \"hi\" once per sec.\n  "]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^G",null]